`timescale 1ns / 1ps
/*module Generate_Arbitrary_Divided_Clk32(inclk,outclk,outclk_Not,div_clk_count,Reset);
    input inclk;
	input Reset;
	output outclk;
	output outclk_Not;
	input[31:0] div_clk_count;
	
	var_clk_div32 Div_Clk(.inclk(inclk),.outclk(outclk),.outclk_not(outclk_Not),.clk_count(div_clk_count),.Reset(Reset));
endmodule*/

module Generate_Arbitrary_Divided_Clk32 (input inclk, Reset, input[31:0] div_clk_count, output reg outclk, outclk_Not);

	reg [31:0] counter;

	always @(posedge inclk) begin
		if (div_clk_count == 0) outclk = 0;
		else if (counter == div_clk_count) outclk = 1;
		if (counter > div_clk_count * 2) begin
			outclk = 0;
			counter = 0;
		end
		counter = counter + 1;
	end
	outclk_Not != outclk;

endmodule


