
C:/Users/Ray Allen/OneDrive/Documents/School/2nd Year/CPEN 211/Lab Git/Labs/Lab 10/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000062 	b	190 <_start>
   4:	ea000083 	b	218 <SERVICE_UND>
   8:	ea000083 	b	21c <SERVICE_SVC>
   c:	ea000084 	b	224 <SERVICE_ABT_INST>
  10:	ea000082 	b	220 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000082 	b	228 <SERVICE_IRQ>
  1c:	ea000092 	b	26c <SERVICE_FIQ>

Disassembly of section .text:

00000040 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
  40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* To configure the FPGA KEYS interrupt (ID 73):
				 *	1. set the target to cpu0 in the ICDIPTRn register
				 *	2. enable the interrupt in the ICDISERn register */
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #73					// KEY port (interrupt ID = 73)
  44:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #1					// this field is a bit-mask; bit 0 targets cpu0
  48:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
  4c:	eb00000d 	bl	88 <CONFIG_INTERRUPT>
			
			// enable interrupts from JTAG UART id 80
			MOV		R0, #80
  50:	e3a00050 	mov	r0, #80	; 0x50
			MOV		R1, #1
  54:	e3a01001 	mov	r1, #1
			BL			CONFIG_INTERRUPT
  58:	eb00000a 	bl	88 <CONFIG_INTERRUPT>

			// enable interrupts from timer id 29
			MOV		R0, #29
  5c:	e3a0001d 	mov	r0, #29
			MOV		R1, #1
  60:	e3a01001 	mov	r1, #1
			BL			CONFIG_INTERRUPT
  64:	eb000007 	bl	88 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =MPCORE_GIC_CPUIF	// base address of CPU interface
  68:	e59f0060 	ldr	r0, [pc, #96]	; d0 <HPS_WATCHDOG1_IRQ+0x4>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
  6c:	e59f1060 	ldr	r1, [pc, #96]	; d4 <HPS_WATCHDOG1_IRQ+0x8>
    			STR		R1, [R0, #ICCPMR]
  70:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
  74:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
  78:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =MPCORE_GIC_DIST
  7c:	e59f0054 	ldr	r0, [pc, #84]	; d8 <HPS_WATCHDOG1_IRQ+0xc>
    			STR		R1, [R0]    
  80:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
  84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000088 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
  88:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
  8c:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
  90:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =MPCORE_GIC_DIST+ICDISER
  94:	e59f2040 	ldr	r2, [pc, #64]	; dc <HPS_WATCHDOG1_IRQ+0x10>
				ADD		R4, R2, R4							// R4 = address of ICDISER
  98:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
  9c:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
  a0:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
  a4:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
  a8:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
  ac:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
  b0:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
  b4:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =MPCORE_GIC_DIST+ICDIPTR
  b8:	e59f2020 	ldr	r2, [pc, #32]	; e0 <HPS_WATCHDOG1_IRQ+0x14>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
  bc:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
  c0:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
  c4:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
  c8:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
  cc:	e8bd8030 	pop	{r4, r5, pc}
  d0:	fffec100 	.word	0xfffec100
  d4:	0000ffff 	.word	0x0000ffff
  d8:	fffed000 	.word	0xfffed000
  dc:	fffed100 	.word	0xfffed100
  e0:	fffed800 	.word	0xfffed800

000000e4 <JTAG_ISR>:
                .include	"address_map_arm.s"
                .global JTAG_ISR
                .global CHAR_BUFFER
                .global CHAR_FLAG
JTAG_ISR:       LDR     R0, =0xFF
  e4:	e3a000ff 	mov	r0, #255	; 0xff
                LDR     R1, =0xFF201000
  e8:	e59f1024 	ldr	r1, [pc, #36]	; 114 <CHAR_FLAG+0x4>
                LDR     R2, [R1]
  ec:	e5912000 	ldr	r2, [r1]
                AND     R0, R2, R0 
  f0:	e0020000 	and	r0, r2, r0
                LDR     R3, =CHAR_BUFFER
  f4:	e59f301c 	ldr	r3, [pc, #28]	; 118 <CHAR_FLAG+0x8>
                STR     R0, [R3]
  f8:	e5830000 	str	r0, [r3]
                LDR     R3, =CHAR_FLAG
  fc:	e59f3018 	ldr	r3, [pc, #24]	; 11c <CHAR_FLAG+0xc>
                MOV     R2, #1
 100:	e3a02001 	mov	r2, #1
                STR     R2, [R3]
 104:	e5832000 	str	r2, [r3]
                BX      LR
 108:	e12fff1e 	bx	lr

0000010c <CHAR_BUFFER>:
 10c:	00000000 	.word	0x00000000

00000110 <CHAR_FLAG>:
 110:	00000000 	.word	0x00000000
 114:	ff201000 	.word	0xff201000
 118:	0000010c 	.word	0x0000010c
 11c:	00000110 	.word	0x00000110

00000120 <KEY_ISR>:
 * This routine checks which KEY has been pressed. It writes to HEX0
 ***************************************************************************************/
				
				.global	KEY_ISR
KEY_ISR:		
				LDR		R0, =KEY_BASE			// base address of pushbutton KEY port
 120:	e59f0060 	ldr	r0, [pc, #96]	; 188 <END_KEY_ISR+0x4>
				LDR		R1, [R0, #0xC]			// read edge capture register
 124:	e590100c 	ldr	r1, [r0, #12]
				MOV		R2, #0xF
 128:	e3a0200f 	mov	r2, #15
				STR		R2, [R0, #0xC]			// clear the interrupt
 12c:	e580200c 	str	r2, [r0, #12]

				LDR		R0, =HEX3_HEX0_BASE	// based address of HEX display
 130:	e59f0054 	ldr	r0, [pc, #84]	; 18c <END_KEY_ISR+0x8>

00000134 <CHECK_KEY0>:
CHECK_KEY0:
				MOV		R3, #0x1
 134:	e3a03001 	mov	r3, #1
				ANDS	R3, R3, R1				// check for KEY0
 138:	e0133001 	ands	r3, r3, r1
				BEQ		CHECK_KEY1
 13c:	0a000002 	beq	14c <CHECK_KEY1>
				MOV		R2, #0b00111111
 140:	e3a0203f 	mov	r2, #63	; 0x3f
				STR		R2, [R0]					// display "0"
 144:	e5802000 	str	r2, [r0]
				B			END_KEY_ISR
 148:	ea00000d 	b	184 <END_KEY_ISR>

0000014c <CHECK_KEY1>:
CHECK_KEY1:
				MOV		R3, #0x2
 14c:	e3a03002 	mov	r3, #2
				ANDS	R3, R3, R1				// check for KEY1
 150:	e0133001 	ands	r3, r3, r1
				BEQ		CHECK_KEY2
 154:	0a000002 	beq	164 <CHECK_KEY2>
				MOV		R2, #0b00000110
 158:	e3a02006 	mov	r2, #6
				STR		R2, [R0]					// display "1"
 15c:	e5802000 	str	r2, [r0]
				B		END_KEY_ISR
 160:	ea000007 	b	184 <END_KEY_ISR>

00000164 <CHECK_KEY2>:
CHECK_KEY2:
				MOV		R3, #0x4
 164:	e3a03004 	mov	r3, #4
				ANDS	R3, R3, R1				// check for KEY2
 168:	e0133001 	ands	r3, r3, r1
				BEQ		IS_KEY3
 16c:	0a000002 	beq	17c <IS_KEY3>
				MOV		R2, #0b01011011
 170:	e3a0205b 	mov	r2, #91	; 0x5b
				STR		R2, [R0]					// display "2"
 174:	e5802000 	str	r2, [r0]
				B		END_KEY_ISR
 178:	ea000001 	b	184 <END_KEY_ISR>

0000017c <IS_KEY3>:
IS_KEY3:
				MOV		R2, #0b01001111
 17c:	e3a0204f 	mov	r2, #79	; 0x4f
				STR		R2, [R0]					// display "3"
 180:	e5802000 	str	r2, [r0]

00000184 <END_KEY_ISR>:
END_KEY_ISR:
				BX		LR
 184:	e12fff1e 	bx	lr
 188:	ff200050 	.word	0xff200050
 18c:	ff200020 	.word	0xff200020

00000190 <_start>:

				.text
				.global	_start
_start:		
				/* Set up stack pointers for IRQ and SVC processor modes */
				MOV		R1, #0b11010010					// interrupts masked, MODE = IRQ
 190:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR		CPSR_c, R1						// change to IRQ mode
 194:	e121f001 	msr	CPSR_c, r1
				LDR		SP, =A9_ONCHIP_END - 3			// set IRQ stack to top of A9 onchip memory
 198:	e3e0d003 	mvn	sp, #3

				/* Change to SVC (supervisor) mode with interrupts disabled */
				MOV		R1, #0b11010011					// interrupts masked, MODE = SVC
 19c:	e3a010d3 	mov	r1, #211	; 0xd3
				MSR		CPSR, R1						// change to supervisor mode
 1a0:	e129f001 	msr	CPSR_fc, r1
				LDR		SP, =DDR_END - 3				// set SVC stack to top of DDR3 memory
 1a4:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

				BL			CONFIG_GIC					// configure the ARM generic interrupt controller
 1a8:	ebffffa4 	bl	40 <CONFIG_GIC>

				// write to the pushbutton KEY interrupt mask register
				LDR		R0, =KEY_BASE					// pushbutton KEY base address
 1ac:	e59f00d8 	ldr	r0, [pc, #216]	; 28c <END_PUT+0x4>
				MOV		R1, #0xF						// set interrupt mask bits
 1b0:	e3a0100f 	mov	r1, #15
				STR		R1, [R0, #0x8]					// interrupt mask register is (base + 8)
 1b4:	e5801008 	str	r1, [r0, #8]

				// enable IRQ interrupts in the processor
				MOV		R0, #0b01010011					// IRQ unmasked, MODE = SVC
 1b8:	e3a00053 	mov	r0, #83	; 0x53
				MSR		CPSR_c, R0
 1bc:	e121f000 	msr	CPSR_c, r0
				LDR		R1, =0x61A80					// move 40000 into R1
 1c0:	e59f10c8 	ldr	r1, [pc, #200]	; 290 <END_PUT+0x8>
				LDR		R0, =MPCORE_PRIV_TIMER
 1c4:	e59f00c8 	ldr	r0, [pc, #200]	; 294 <END_PUT+0xc>
				STR		R1, [R0]						// load R1 into load value
 1c8:	e5801000 	str	r1, [r0]
				LDR		R1, =0xFFFF
 1cc:	e59f10c4 	ldr	r1, [pc, #196]	; 298 <END_PUT+0x10>
				STR		R1, [R0, #0x8]					// store prescaler 255 into control for timer and set control bits A,E to 1
 1d0:	e5801008 	str	r1, [r0, #8]
					
				// enable JTAG interrupts
				LDR		R0, =0xFF201004
 1d4:	e59f00c0 	ldr	r0, [pc, #192]	; 29c <END_PUT+0x14>
				LDR		R1, [R0]
 1d8:	e5901000 	ldr	r1, [r0]
				ORR		R1, #1
 1dc:	e3811001 	orr	r1, r1, #1
				LDR		R2, =0xFFFFFFFD
 1e0:	e3e02002 	mvn	r2, #2
				AND		R1, R2
 1e4:	e0011002 	and	r1, r1, r2
				STR		R1, [R0]
 1e8:	e5801000 	str	r1, [r0]

000001ec <IDLE>:
				
				
				
IDLE:				
				LDR		R0, =CHAR_FLAG
 1ec:	e59f00ac 	ldr	r0, [pc, #172]	; 2a0 <END_PUT+0x18>
				LDR		R1, [R0]
 1f0:	e5901000 	ldr	r1, [r0]
				CMP		R1, #1
 1f4:	e3510001 	cmp	r1, #1
				BNE		IDLE
 1f8:	1afffffb 	bne	1ec <IDLE>
				LDR		R1, =CHAR_BUFFER
 1fc:	e59f10a0 	ldr	r1, [pc, #160]	; 2a4 <END_PUT+0x1c>
				LDR 	R0, [R1]
 200:	e5910000 	ldr	r0, [r1]
				BL		PUT_JTAG
 204:	eb000019 	bl	270 <PUT_JTAG>
				LDR		R0, =CHAR_FLAG
 208:	e59f0090 	ldr	r0, [pc, #144]	; 2a0 <END_PUT+0x18>
				MOV		R1, #0
 20c:	e3a01000 	mov	r1, #0
				STR		R1, [R0]
 210:	e5801000 	str	r1, [r0]
				
				B 		IDLE									// main program simply idles
 214:	eafffff4 	b	1ec <IDLE>

00000218 <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:
    			B SERVICE_UND 
 218:	eafffffe 	b	218 <SERVICE_UND>

0000021c <SERVICE_SVC>:
 
/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:			
    			B SERVICE_SVC 
 21c:	eafffffe 	b	21c <SERVICE_SVC>

00000220 <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:
    			B SERVICE_ABT_DATA 
 220:	eafffffe 	b	220 <SERVICE_ABT_DATA>

00000224 <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:
    			B SERVICE_ABT_INST 
 224:	eafffffe 	b	224 <SERVICE_ABT_INST>

00000228 <SERVICE_IRQ>:
 
/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:
    			PUSH		{R0-R7, LR}
 228:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    
    			/* Read the ICCIAR from the CPU interface */
    			LDR		R4, =MPCORE_GIC_CPUIF
 22c:	e59f4074 	ldr	r4, [pc, #116]	; 2a8 <END_PUT+0x20>
    			LDR		R5, [R4, #ICCIAR]				// read from ICCIAR
 230:	e594500c 	ldr	r5, [r4, #12]
				CMP 	R5, #29
 234:	e355001d 	cmp	r5, #29
				BNE		FPGA_IRQ1_HANDLER				//If R5 != 29, branch to FPGA_IRQ1_HANDLER
 238:	1a000001 	bne	244 <FPGA_IRQ1_HANDLER>
				BL		TIMER_ISR						//Else continue
 23c:	eb00001b 	bl	2b0 <TIMER_ISR>
				B		EXIT_IRQ
 240:	ea000006 	b	260 <EXIT_IRQ>

00000244 <FPGA_IRQ1_HANDLER>:


FPGA_IRQ1_HANDLER:
				CMP		R5, #80
 244:	e3550050 	cmp	r5, #80	; 0x50
				BNE		FPGA_IRQ2_HANDLER
 248:	1a000001 	bne	254 <FPGA_IRQ2_HANDLER>
				BL		JTAG_ISR
 24c:	ebffffa4 	bl	e4 <JTAG_ISR>
				B		EXIT_IRQ
 250:	ea000002 	b	260 <EXIT_IRQ>

00000254 <FPGA_IRQ2_HANDLER>:

FPGA_IRQ2_HANDLER:
    			CMP		R5, #KEYS_IRQ
 254:	e3550049 	cmp	r5, #73	; 0x49

00000258 <UNEXPECTED>:

UNEXPECTED:		BNE		UNEXPECTED    					// if not recognized, stop here
 258:	1afffffe 	bne	258 <UNEXPECTED>
    
    			BL		KEY_ISR
 25c:	ebffffaf 	bl	120 <KEY_ISR>

00000260 <EXIT_IRQ>:
EXIT_IRQ:
    			/* Write to the End of Interrupt Register (ICCEOIR) */
    			STR		R5, [R4, #ICCEOIR]			// write to ICCEOIR
 260:	e5845010 	str	r5, [r4, #16]
    
    			POP		{R0-R7, LR}
 264:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    			SUBS		PC, LR, #4
 268:	e25ef004 	subs	pc, lr, #4

0000026c <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:
    			B			SERVICE_FIQ 
 26c:	eafffffe 	b	26c <SERVICE_FIQ>

00000270 <PUT_JTAG>:



PUT_JTAG:		LDR 	R1, =0xFF201000 		// JTAG UART base address
 270:	e59f1034 	ldr	r1, [pc, #52]	; 2ac <END_PUT+0x24>
				LDR 	R2, [R1, #4] 			// read the JTAG UART control register
 274:	e5912004 	ldr	r2, [r1, #4]
				LDR 	R3, =0xFFFF
 278:	e59f3018 	ldr	r3, [pc, #24]	; 298 <END_PUT+0x10>
				ANDS 	R2, R2, R3 				// check for write space
 27c:	e0122003 	ands	r2, r2, r3
				BEQ 	END_PUT 				// if no space, ignore the character
 280:	0a000000 	beq	288 <END_PUT>
				STR 	R0, [R1] 				// send the character
 284:	e5810000 	str	r0, [r1]

00000288 <END_PUT>:
END_PUT:		BX 		LR
 288:	e12fff1e 	bx	lr
 28c:	ff200050 	.word	0xff200050
 290:	00061a80 	.word	0x00061a80
 294:	fffec600 	.word	0xfffec600
 298:	0000ffff 	.word	0x0000ffff
 29c:	ff201004 	.word	0xff201004
 2a0:	00000110 	.word	0x00000110
 2a4:	0000010c 	.word	0x0000010c
 2a8:	fffec100 	.word	0xfffec100
 2ac:	ff201000 	.word	0xff201000

000002b0 <TIMER_ISR>:
            .include	"address_map_arm.s"
            .global TIMER_ISR
            .global TIMER_VAL
TIMER_ISR:  LDR     R0, =TIMER_VAL
 2b0:	e59f0018 	ldr	r0, [pc, #24]	; 2d0 <TIMER_VAL+0x4>
            LDR     R2, [R0]
 2b4:	e5902000 	ldr	r2, [r0]
            ADD     R2, #1
 2b8:	e2822001 	add	r2, r2, #1
            STR     R2, [R0]
 2bc:	e5802000 	str	r2, [r0]


            LDR     R1, =LEDR_BASE
 2c0:	e59f100c 	ldr	r1, [pc, #12]	; 2d4 <TIMER_VAL+0x8>
            STR     R2, [R1]
 2c4:	e5812000 	str	r2, [r1]
            BX      LR
 2c8:	e12fff1e 	bx	lr

000002cc <TIMER_VAL>:
 2cc:	00000000 	.word	0x00000000
 2d0:	000002cc 	.word	0x000002cc
 2d4:	ff200000 	.word	0xff200000
