
C:/Users/Ray Allen/OneDrive/Documents/School/2nd Year/CPEN 211/Lab Git/Labs/Lab 9/binary_search.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
.globl binary_search
       binary_search:	ldr r12,[sp, #-4]	// loads numcalls into r12
   0:	e51dc004 	ldr	r12, [sp, #-4]
       			add r12, #1		// numcalls++
   4:	e28cc001 	add	r12, r12, #1
			
			sub sp,sp, #12		// make room for numcalls, r4, link register on the stack
   8:	e24dd00c 	sub	sp, sp, #12
			str lr,[sp, #4]		// store link register
   c:	e58de004 	str	lr, [sp, #4]
			str r4,[sp, #0]		// store r4 onto the stack
  10:	e58d4000 	str	r4, [sp]
						// after 	________
						//	        numcalls
						// 		r4 copy
						//        sp ->	r5 copy

			sub r4,r3,r2		// endindex - startindex
  14:	e0434002 	sub	r4, r3, r2
			lsr r4,r4,#1		// division by 2
  18:	e1a040a4 	lsr	r4, r4, #1
			add r4,r2,r4		// middleindex = startIndex + (endIndex - startIndex)/2
  1c:	e0824004 	add	r4, r2, r4

			str r12,[sp, #-4] 	// stores numcalls++ into the stack (below sp)
  20:	e50dc004 	str	r12, [sp, #-4]

			cmp r2,r3		// compares startindex with endindex
  24:	e1520003 	cmp	r2, r3

			ble test_middle		// if ( startindex > endindex ) return -1
  28:	da000001 	ble	34 <test_middle>
			mov r0, #-1		// prep for return of condition fails 
  2c:	e3e00000 	mvn	r0, #0
			mov pc,lr		// return control to caller
  30:	e1a0f00e 	mov	pc, lr

00000034 <test_middle>:

	test_middle:	ldr r12,[r0, r4, lsl#2]	// r12 = numbers[middleindex] 
  34:	e790c104 	ldr	r12, [r0, r4, lsl #2]
			cmp r12,r1		// compare numbers[middleindex] with key
  38:	e15c0001 	cmp	r12, r1
			bne search_l		// if ( numbers[middleIndex] == key ) keyIndex = middleIndex
  3c:	1a000006 	bne	5c <search_l>
			ldr r3,[sp, #-4]	// r3 = numcalls
  40:	e51d3004 	ldr	r3, [sp, #-4]
			rsb r3,r3, #0		// r3 = 0 - r3
  44:	e2633000 	rsb	r3, r3, #0
			str r3,[r0, r4, lsl#2]	// numbers[ middleIndex ] = -numcalls
  48:	e7803104 	str	r3, [r0, r4, lsl #2]
			mov r0,r4		// keyindex = middleindex
  4c:	e1a00004 	mov	r0, r4
			mov r1,r4		// r1 = middleindex
  50:	e1a01004 	mov	r1, r4
			ldr r4,[sp, #0]		// restore r4
  54:	e59d4000 	ldr	r4, [sp]
			b return_result		// go to return branch with the found key
  58:	ea00000e 	b	98 <return_result>

0000005c <search_l>:
	
	search_l:	ble search_r		// if ( numbers[middleIndex] > key ) search smaller section
  5c:	da000006 	ble	7c <search_r>
			mov r3,r4
  60:	e1a03004 	mov	r3, r4
			sub r3,r3, #1		// endindex = middleindex-1
  64:	e2433001 	sub	r3, r3, #1
			bl binary_search	// how deep does the rabbit hole go?
  68:	ebffffe4 	bl	0 <__cs3_interrupt_vector>
			ldr lr,[sp, #4]
  6c:	e59de004 	ldr	lr, [sp, #4]
			ldr r4,[sp, #0]		// restore r4
  70:	e59d4000 	ldr	r4, [sp]
			add sp,sp, #12		// pop 3 items off stack
  74:	e28dd00c 	add	sp, sp, #12
			b return_result		// go to return branch with result
  78:	ea000006 	b	98 <return_result>

0000007c <search_r>:

	search_r:	mov r2,r4
  7c:	e1a02004 	mov	r2, r4
			add r2, #1		// startindex = middleindex+1 
  80:	e2822001 	add	r2, r2, #1
			bl binary_search	// pretty deep apparently
  84:	ebffffdd 	bl	0 <__cs3_interrupt_vector>
			ldr lr,[sp, #4]
  88:	e59de004 	ldr	lr, [sp, #4]
			ldr r4,[sp, #0]		// restore r4
  8c:	e59d4000 	ldr	r4, [sp]
			add sp,sp, #12		// pop 3 items off the stack
  90:	e28dd00c 	add	sp, sp, #12
			b return_result		// go to return branch with result
  94:	eaffffff 	b	98 <return_result>

00000098 <return_result>:
	
	return_result:	mov pc,lr		// return control to caller
  98:	e1a0f00e 	mov	pc, lr

0000009c <_start>:

.include "address_map_arm.s"
.text
.globl _start
_start:
      ldr r4,=SW_BASE
  9c:	e59f4390 	ldr	r4, [pc, #912]	; 434 <numbers+0x190>
      ldr r5,=KEY_BASE 
  a0:	e59f5390 	ldr	r5, [pc, #912]	; 438 <numbers+0x194>
      ldr r6,=LEDR_BASE
  a4:	e59f6390 	ldr	r6, [pc, #912]	; 43c <numbers+0x198>

000000a8 <wait_key3>:

      // enter the value of "key" on SW0-SW9 here, then press KEY3
wait_key3:
      ldr r7,[r4]         // Read SW0-SW9 into R7
  a8:	e5947000 	ldr	r7, [r4]

      str r7,[r6]         // Show SW0-SW9 value on LEDR0-LEDR9
  ac:	e5867000 	str	r7, [r6]
      // triggers a ``Data Abort'' exception, which in turn 
      // causes the Cortex-A9 to set the PC to 0x00000010.  
      // Debug tip: Check you write -numData to the right 
      // address in memory.

      ldr r9,[r5]         // Read KEY0-KEY3 into R9 
  b0:	e5959000 	ldr	r9, [r5]

      ands r9,r9,#8       // Is KEY3 pressed?
  b4:	e2199008 	ands	r9, r9, #8
      // to indicate R9 is not zero.  
      //
      // If KEY3 is NOT pressed ands r9,r9,#8 sets Z flag to 1 
      // to indicate R9 is zero.

      beq wait_key3       // Branch if Z=1 (KEY3 was NOT pressed)
  b8:	0afffffa 	beq	a8 <wait_key3>

      // initialize numbers array by copying array "data" to "numbers"
      ldr r0, =data
  bc:	e59f037c 	ldr	r0, [pc, #892]	; 440 <numbers+0x19c>
      ldr r1, =numbers
  c0:	e59f137c 	ldr	r1, [pc, #892]	; 444 <numbers+0x1a0>
      mov r2,#100
  c4:	e3a02064 	mov	r2, #100	; 0x64
      add r2,r0, r2, LSL #2
  c8:	e0802102 	add	r2, r0, r2, lsl #2
      bl  init_numbers
  cc:	eb00000b 	bl	100 <init_numbers>

      ldr r0, =numbers    // R0 = numbers
  d0:	e59f036c 	ldr	r0, [pc, #876]	; 444 <numbers+0x1a0>
      mov r1,r7           // R1 = key
  d4:	e1a01007 	mov	r1, r7
      mov r2,#0           // R2 = startIndex
  d8:	e3a02000 	mov	r2, #0
      mov r3,#99          // R3 = endIndex (start with small value to debug)
  dc:	e3a03063 	mov	r3, #99	; 0x63
      mov r8,#0           // initial NumCalls
  e0:	e3a08000 	mov	r8, #0
      str r8,[sp,#-4]     // save 5th arg to stack (see Slide Set 9)
  e4:	e50d8004 	str	r8, [sp, #-4]
      bl  binary_search   // call binary_search    
  e8:	ebffffc4 	bl	0 <__cs3_interrupt_vector>
      str r0,[r6]         // display result on LEDR0-LEDR9 (check your result!)
  ec:	e5860000 	str	r0, [r6]

000000f0 <wait_key0>:
      // format of memory by right-clicking on the background, selecting "Number
      // format" then "Decimal".  Repeat and in the last step select "Signed 
      // representation".  If endIndex was 99, you should see something like 
      // Figure 6 in the Lab 9 handout.
wait_key0:                
      ldr  r1,[r5]        // read KEY0-KEY3
  f0:	e5951000 	ldr	r1, [r5]
      ands r1,r1,#1       // check if KEY0 pressed
  f4:	e2111001 	ands	r1, r1, #1
      beq  wait_key0      // wait for KEY0 to be pressed
  f8:	0afffffc 	beq	f0 <wait_key0>

      b wait_key3         // go back and try another search
  fc:	eaffffe9 	b	a8 <wait_key3>

00000100 <init_numbers>:

// "init_numbers" copies array pointed at by r0 into array pointed at by r1
// The following code is NOT recursive.  It contains a loop.
init_numbers:
      ldr r3, [r0], #4
 100:	e4903004 	ldr	r3, [r0], #4
      str r3, [r1], #4
 104:	e4813004 	str	r3, [r1], #4
      cmp r0, r2
 108:	e1500002 	cmp	r0, r2
      blt init_numbers
 10c:	bafffffb 	blt	100 <init_numbers>
      mov pc, lr
 110:	e1a0f00e 	mov	pc, lr

00000114 <data>:
 114:	0000001c 	.word	0x0000001c
 118:	00000025 	.word	0x00000025
 11c:	0000002c 	.word	0x0000002c
 120:	0000003c 	.word	0x0000003c
 124:	00000055 	.word	0x00000055
 128:	00000063 	.word	0x00000063
 12c:	00000079 	.word	0x00000079
 130:	0000007f 	.word	0x0000007f
 134:	00000081 	.word	0x00000081
 138:	0000008a 	.word	0x0000008a
 13c:	0000008f 	.word	0x0000008f
 140:	0000009b 	.word	0x0000009b
 144:	000000a2 	.word	0x000000a2
 148:	000000a4 	.word	0x000000a4
 14c:	000000af 	.word	0x000000af
 150:	000000b3 	.word	0x000000b3
 154:	000000cd 	.word	0x000000cd
 158:	000000d4 	.word	0x000000d4
 15c:	000000d9 	.word	0x000000d9
 160:	000000e7 	.word	0x000000e7
 164:	000000eb 	.word	0x000000eb
 168:	000000ee 	.word	0x000000ee
 16c:	000000f2 	.word	0x000000f2
 170:	000000f8 	.word	0x000000f8
 174:	000000fa 	.word	0x000000fa
 178:	00000102 	.word	0x00000102
 17c:	0000011b 	.word	0x0000011b
 180:	0000011e 	.word	0x0000011e
 184:	00000131 	.word	0x00000131
 188:	00000137 	.word	0x00000137
 18c:	0000013c 	.word	0x0000013c
 190:	00000142 	.word	0x00000142
 194:	00000146 	.word	0x00000146
 198:	0000015f 	.word	0x0000015f
 19c:	00000163 	.word	0x00000163
 1a0:	0000016c 	.word	0x0000016c
 1a4:	0000016e 	.word	0x0000016e
 1a8:	00000178 	.word	0x00000178
 1ac:	00000187 	.word	0x00000187
 1b0:	0000018e 	.word	0x0000018e
 1b4:	00000198 	.word	0x00000198
 1b8:	0000019a 	.word	0x0000019a
 1bc:	0000019f 	.word	0x0000019f
 1c0:	000001a2 	.word	0x000001a2
 1c4:	000001a9 	.word	0x000001a9
 1c8:	000001b5 	.word	0x000001b5
 1cc:	000001b9 	.word	0x000001b9
 1d0:	000001c4 	.word	0x000001c4
 1d4:	000001da 	.word	0x000001da
 1d8:	000001e8 	.word	0x000001e8
 1dc:	000001fa 	.word	0x000001fa
 1e0:	000001fb 	.word	0x000001fb
 1e4:	0000020e 	.word	0x0000020e
 1e8:	00000214 	.word	0x00000214
 1ec:	00000216 	.word	0x00000216
 1f0:	00000223 	.word	0x00000223
 1f4:	00000224 	.word	0x00000224
 1f8:	00000247 	.word	0x00000247
 1fc:	00000249 	.word	0x00000249
 200:	00000253 	.word	0x00000253
 204:	0000025b 	.word	0x0000025b
 208:	0000026d 	.word	0x0000026d
 20c:	00000280 	.word	0x00000280
 210:	00000295 	.word	0x00000295
 214:	0000029a 	.word	0x0000029a
 218:	000002b2 	.word	0x000002b2
 21c:	000002b4 	.word	0x000002b4
 220:	000002c9 	.word	0x000002c9
 224:	000002cf 	.word	0x000002cf
 228:	000002ee 	.word	0x000002ee
 22c:	000002f3 	.word	0x000002f3
 230:	00000300 	.word	0x00000300
 234:	00000307 	.word	0x00000307
 238:	00000308 	.word	0x00000308
 23c:	00000310 	.word	0x00000310
 240:	00000311 	.word	0x00000311
 244:	00000317 	.word	0x00000317
 248:	0000031d 	.word	0x0000031d
 24c:	0000031e 	.word	0x0000031e
 250:	00000324 	.word	0x00000324
 254:	0000033c 	.word	0x0000033c
 258:	0000034a 	.word	0x0000034a
 25c:	0000034e 	.word	0x0000034e
 260:	0000035a 	.word	0x0000035a
 264:	00000374 	.word	0x00000374
 268:	00000377 	.word	0x00000377
 26c:	0000037a 	.word	0x0000037a
 270:	0000037d 	.word	0x0000037d
 274:	0000038c 	.word	0x0000038c
 278:	000003a8 	.word	0x000003a8
 27c:	000003ab 	.word	0x000003ab
 280:	000003b9 	.word	0x000003b9
 284:	000003c0 	.word	0x000003c0
 288:	000003ca 	.word	0x000003ca
 28c:	000003d2 	.word	0x000003d2
 290:	000003d3 	.word	0x000003d3
 294:	000003d5 	.word	0x000003d5
 298:	000003de 	.word	0x000003de
 29c:	000003ea 	.word	0x000003ea
 2a0:	000003ef 	.word	0x000003ef

000002a4 <numbers>:
 2a4:	deadbeef 	.word	0xdeadbeef
 2a8:	deadbeef 	.word	0xdeadbeef
 2ac:	deadbeef 	.word	0xdeadbeef
 2b0:	deadbeef 	.word	0xdeadbeef
 2b4:	deadbeef 	.word	0xdeadbeef
 2b8:	deadbeef 	.word	0xdeadbeef
 2bc:	deadbeef 	.word	0xdeadbeef
 2c0:	deadbeef 	.word	0xdeadbeef
 2c4:	deadbeef 	.word	0xdeadbeef
 2c8:	deadbeef 	.word	0xdeadbeef
 2cc:	deadbeef 	.word	0xdeadbeef
 2d0:	deadbeef 	.word	0xdeadbeef
 2d4:	deadbeef 	.word	0xdeadbeef
 2d8:	deadbeef 	.word	0xdeadbeef
 2dc:	deadbeef 	.word	0xdeadbeef
 2e0:	deadbeef 	.word	0xdeadbeef
 2e4:	deadbeef 	.word	0xdeadbeef
 2e8:	deadbeef 	.word	0xdeadbeef
 2ec:	deadbeef 	.word	0xdeadbeef
 2f0:	deadbeef 	.word	0xdeadbeef
 2f4:	deadbeef 	.word	0xdeadbeef
 2f8:	deadbeef 	.word	0xdeadbeef
 2fc:	deadbeef 	.word	0xdeadbeef
 300:	deadbeef 	.word	0xdeadbeef
 304:	deadbeef 	.word	0xdeadbeef
 308:	deadbeef 	.word	0xdeadbeef
 30c:	deadbeef 	.word	0xdeadbeef
 310:	deadbeef 	.word	0xdeadbeef
 314:	deadbeef 	.word	0xdeadbeef
 318:	deadbeef 	.word	0xdeadbeef
 31c:	deadbeef 	.word	0xdeadbeef
 320:	deadbeef 	.word	0xdeadbeef
 324:	deadbeef 	.word	0xdeadbeef
 328:	deadbeef 	.word	0xdeadbeef
 32c:	deadbeef 	.word	0xdeadbeef
 330:	deadbeef 	.word	0xdeadbeef
 334:	deadbeef 	.word	0xdeadbeef
 338:	deadbeef 	.word	0xdeadbeef
 33c:	deadbeef 	.word	0xdeadbeef
 340:	deadbeef 	.word	0xdeadbeef
 344:	deadbeef 	.word	0xdeadbeef
 348:	deadbeef 	.word	0xdeadbeef
 34c:	deadbeef 	.word	0xdeadbeef
 350:	deadbeef 	.word	0xdeadbeef
 354:	deadbeef 	.word	0xdeadbeef
 358:	deadbeef 	.word	0xdeadbeef
 35c:	deadbeef 	.word	0xdeadbeef
 360:	deadbeef 	.word	0xdeadbeef
 364:	deadbeef 	.word	0xdeadbeef
 368:	deadbeef 	.word	0xdeadbeef
 36c:	deadbeef 	.word	0xdeadbeef
 370:	deadbeef 	.word	0xdeadbeef
 374:	deadbeef 	.word	0xdeadbeef
 378:	deadbeef 	.word	0xdeadbeef
 37c:	deadbeef 	.word	0xdeadbeef
 380:	deadbeef 	.word	0xdeadbeef
 384:	deadbeef 	.word	0xdeadbeef
 388:	deadbeef 	.word	0xdeadbeef
 38c:	deadbeef 	.word	0xdeadbeef
 390:	deadbeef 	.word	0xdeadbeef
 394:	deadbeef 	.word	0xdeadbeef
 398:	deadbeef 	.word	0xdeadbeef
 39c:	deadbeef 	.word	0xdeadbeef
 3a0:	deadbeef 	.word	0xdeadbeef
 3a4:	deadbeef 	.word	0xdeadbeef
 3a8:	deadbeef 	.word	0xdeadbeef
 3ac:	deadbeef 	.word	0xdeadbeef
 3b0:	deadbeef 	.word	0xdeadbeef
 3b4:	deadbeef 	.word	0xdeadbeef
 3b8:	deadbeef 	.word	0xdeadbeef
 3bc:	deadbeef 	.word	0xdeadbeef
 3c0:	deadbeef 	.word	0xdeadbeef
 3c4:	deadbeef 	.word	0xdeadbeef
 3c8:	deadbeef 	.word	0xdeadbeef
 3cc:	deadbeef 	.word	0xdeadbeef
 3d0:	deadbeef 	.word	0xdeadbeef
 3d4:	deadbeef 	.word	0xdeadbeef
 3d8:	deadbeef 	.word	0xdeadbeef
 3dc:	deadbeef 	.word	0xdeadbeef
 3e0:	deadbeef 	.word	0xdeadbeef
 3e4:	deadbeef 	.word	0xdeadbeef
 3e8:	deadbeef 	.word	0xdeadbeef
 3ec:	deadbeef 	.word	0xdeadbeef
 3f0:	deadbeef 	.word	0xdeadbeef
 3f4:	deadbeef 	.word	0xdeadbeef
 3f8:	deadbeef 	.word	0xdeadbeef
 3fc:	deadbeef 	.word	0xdeadbeef
 400:	deadbeef 	.word	0xdeadbeef
 404:	deadbeef 	.word	0xdeadbeef
 408:	deadbeef 	.word	0xdeadbeef
 40c:	deadbeef 	.word	0xdeadbeef
 410:	deadbeef 	.word	0xdeadbeef
 414:	deadbeef 	.word	0xdeadbeef
 418:	deadbeef 	.word	0xdeadbeef
 41c:	deadbeef 	.word	0xdeadbeef
 420:	deadbeef 	.word	0xdeadbeef
 424:	deadbeef 	.word	0xdeadbeef
 428:	deadbeef 	.word	0xdeadbeef
 42c:	deadbeef 	.word	0xdeadbeef
 430:	deadbeef 	.word	0xdeadbeef
 434:	ff200040 	.word	0xff200040
 438:	ff200050 	.word	0xff200050
 43c:	ff200000 	.word	0xff200000
 440:	00000114 	.word	0x00000114
 444:	000002a4 	.word	0x000002a4
